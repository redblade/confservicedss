HOWTO get secrets from service account

export sa=$1
export ns=$2

echo secret $sa in namespace $ns has base64-decoded token equals to:
kubectl get secret `kubectl get sa $sa -n $ns -o yaml | grep token | awk '{print $3}'` -n $ns -o yaml | grep " token" | awk '{print $2}' | base64 --decode



HOWTO create a role across namespaces (and verify)

kubectl create clusterrole my_clusterrole --verb=create,get,list,update,delete,watch --resource=*
kubectl create clusterrolebinding my_clusterrole --clusterrole my_clusterrole --serviceaccount core:orchestrator

kubectl auth can-i create deploy  --as=system:serviceaccount:core:orchestrator -n uc1
kubectl auth can-i create deploy  --as=system:serviceaccount:core:orchestrator -n uc2
kubectl auth can-i create deploy  --as=system:serviceaccount:core:orchestrator -n uc3


HOWTO create a Kubernetes config file starting from a serviceaccount

# Cosmetics for the created config
clusterName=my-cluster
# your server address goes here get it via `kubectl cluster-info`
server=https://myserver:6443
# the Namespace and ServiceAccount name that is used for the config
namespace=core
serviceAccount=orchestrator

######################
# actual script starts
set -o errexit

secretName=$(kubectl --namespace $namespace get serviceAccount $serviceAccount -o jsonpath='{.secrets[0].name}')
ca=$(kubectl --namespace $namespace get secret/$secretName -o jsonpath='{.data.ca\.crt}')
token=$(kubectl --namespace $namespace get secret/$secretName -o jsonpath='{.data.token}' | base64 --decode)

echo "
---
apiVersion: v1
kind: Config
clusters:
  - name: ${clusterName}
    cluster:
      certificate-authority-data: ${ca}
      server: ${server}
contexts:
  - name: ${serviceAccount}@${clusterName}
    context:
      cluster: ${clusterName}
      namespace: ${namespace}
      user: ${serviceAccount}
users:
  - name: ${serviceAccount}
    user:
      token: ${token}
current-context: ${serviceAccount}@${clusterName}
"
